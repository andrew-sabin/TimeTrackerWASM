@inject IProjectService ProjectService
@inject AuthenticationStateProvider AuthStateProvider
@implements IDisposable

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    <h3>Error: 401 Not Authorized</h3>
                    <p>You are not authorized to access this feature.<br/>
                        Please <a href="login">Log In</a> or <a href="register">Register an Account</a> to access this feature.</p>
				</NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>


@code {
    protected override void OnInitialized()
    {
        AuthStateProvider.AuthenticationStateChanged += OnAuthStateChanged;
    }

    public async void OnAuthStateChanged(Task<AuthenticationState> task)
    {
        var state = await task;
        if(state!= null && state.User.Identity!.IsAuthenticated)
        {
			await ProjectService.LoadAllProjects(); // Load projects or any other data
        } 
	}

    public void Dispose()
    {
        AuthStateProvider.AuthenticationStateChanged -= OnAuthStateChanged;
	}
}
