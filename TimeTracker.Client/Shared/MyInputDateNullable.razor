@using System.Diagnostics.CodeAnalysis;
@using System.Linq.Expressions
@inherits InputBase<DateTime?>

<div>
	@if (!string.IsNullOrWhiteSpace(Label))
	{
		<label for="@Id" class="text-sm font-medium text-gray-700 mt-2">@Label</label>
	}
	<input type="@Type" id="@Id" @bind="@CurrentValueAsString"
		class="mt-0.5 w-full rounded border-gray-300 shadow-sm sm:text-sm" />
	<ValidationMessage For="@ValidationFor" class="text-xl-start text-red-600 font-extrabold my-1" />
</div>

@code {
	[Parameter]
	public string? Id { get; set; }
	[Parameter]
	public string? Label { get; set; }
	[Parameter]
	public string? Type { get; set; } = "date";
	[Parameter]
	public Expression<Func<DateTime?>> ValidationFor { get; set; } = default!;

	protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out DateTime? result, [NotNullWhen(false)] out string validationErrorMessage)
	{
		if(DateTime.TryParse(value, out DateTime tempResult))
		{
			result = tempResult;
			validationErrorMessage = string.Empty;
			return true;
		}

		result = null;
		validationErrorMessage = $"The {FieldIdentifier.FieldName} is not a valid date.";
		return false;
	}

	protected override string FormatValueAsString(DateTime? value)
	{
		if(value == null || !value.HasValue)
		{
			return string.Empty; // Return empty string for null values
		}

		return value.Value.ToString("yyyy-MM-dd");
	}
}
