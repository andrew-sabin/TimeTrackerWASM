@page "/project"
@page "/project/{id:int}"
@using Mapster;
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]

@if (Id is null)
{
	<PageTitle>Create a new Project</PageTitle>
	<h3>Create a new Project</h3>
}
else
{
	<PageTitle>Edit Project "@project.Name"</PageTitle>
	<h3>Edit Project "@project.Name"</h3>
}

<EditForm Model="project" OnValidSubmit="HandleSubmit">
	<DataAnnotationsValidator />

	<MyInputText Id="name" Label="Name"
				 @bind-Value="project.Name" ValidationFor="() => project.Name" />
	<MyInputTextArea Id="description" Label="Description"
					 @bind-Value="project.Description" ValidationFor="() => project.Description" />
	<MyInputDateNullable Id="start" Label="Start Date"
						 @bind-Value="project.Start" ValidationFor="() => project.Start"/>
	<MyInputDateNullable Id="endDate" Label="End Date" @bind-Value ="project.EndDate"
						 ValidationFor="() => project.EndDate" />
	<div class="flex gap-4">
		@if (Id != null)
		{
			<button type="button" class="btn btn-danger mt-4 mx-1"
					@onclick="DeleteProject">
				Delete
			</button>
		}
		else
		{
			<div class="alert alert-info mt-2">
				<strong>Note:</strong> Creating a new project will add it to the list.
			</div>
		}
		<div>
			<button type="submit" class="btn btn-primary mt-4">Submit</button>
		</div>
	</div>
	
</EditForm>

@code {
	[Parameter]
	public int? Id { get; set; }

	ProjectRequest project = new ProjectRequest {Name = string.Empty};

	protected override async Task OnInitializedAsync()
	{
		ProjectService.OnChange += StateHasChanged;
		if (Id != null)
		{
			var result = await ProjectService.GetProjectById((int)Id);
			project = result.Adapt<ProjectRequest>();
		}
	}

	async Task DeleteProject()
	{
		var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this project?");
		if (Id != null && confirmed)
		{
			await ProjectService.DeleteProject((int)Id);
			NavigationManager.NavigateTo("/projects");
		}
	}

	async Task HandleSubmit()
	{
		if (Id == null)
		{
			await ProjectService.CreateProject(project);
			NavigationManager.NavigateTo("/projects");
		}
		else
		{
			await ProjectService.UpdateProject((int)Id, project);
			NavigationManager.NavigateTo("/projects");
		}
	}

}
