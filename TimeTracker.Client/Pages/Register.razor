@page "/register"
@inject IAuthService AuthService


<h3>Register</h3>

<EditForm Model="newUser" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    
    <MyInputText Label="Name" Id="name" @bind-Value="newUser.Username" 
        ValidationFor="() => newUser.Username" />
    <MyInputText Label="E-mail" Id="name" @bind-Value="newUser.Email"
                 ValidationFor="() => newUser.Email" />
    <MyInputText Label="Password" Id="name" @bind-Value="newUser.Password"
                 ValidationFor="() => newUser.Password" />
    <MyInputText Label="Confirm Password" Id="name" @bind-Value="newUser.ConfirmPassword"
                 ValidationFor="() => newUser.ConfirmPassword" />
    <MyButton Text="Register" Type="submit" AddMarginTop />
</EditForm>

@if(registrationFailed){
    @foreach (var error in registrationErrors)
    {
        <div>
            <span class="text-xs text-red-500 font-extrabold my-1">@error</span>
        </div>
	}
}
@if(registrationSuccessful){
    <div>
        <span class="text-xs text-green-500 font-extrabold my-1">Registration successful! You can now log in.</span>
    </div>
}


@code {
    AccountRegistrationRequest newUser = new AccountRegistrationRequest();
    bool registrationFailed = false;
    bool registrationSuccessful = false;
    List<string> registrationErrors = new List<string>();


    async Task HandleRegistration()
    {
        registrationFailed = registrationSuccessful = false;
        registrationErrors = new List<string>();

        var response = await AuthService.Register(newUser);
        registrationSuccessful = response.IsSuccessful;

        if(!response.IsSuccessful && response.Errors != null)
        {
            registrationFailed = true;
			registrationErrors = response.Errors.ToList();
        }
        else if(!response.IsSuccessful)
        {
            registrationFailed = true;
            registrationErrors.Add("An unknown error occurred.");
		}
    }
}
