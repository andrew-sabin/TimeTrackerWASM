@page "/timeentries"
@inject ITimeEntryService TimeEntryService
@inject NavigationManager NavigationManager
@implements IDisposable
@attribute [Authorize]

<PageTitle>Time Entries</PageTitle>
<h3>Time Entries</h3>

<ProjectSelector />

<MyButton Text="Create Project" 
	Level="MyButton.ButtonLevel.Primary" 
	OnClick="CreateTimeEntry" 
	AddMarginTop />

<QuickGrid Items="FilteredTimeEntries" Pagination="@pagination">
	<PropertyColumn Property="t => t.Start" />
	<PropertyColumn Property="t => t.End" />
	<PropertyColumn Property="t => GetDuration(t.Start, t.End)" Title="Duration" />
	<PropertyColumn Property="t => t.Project.Name" Title="Project">
		<ColumnOptions>
			<div>
				<input type="search" autofocus @bind="projectFilter" @bind:event="oninput" 
					placeholder="Project Name..."
					class="mt-1 p-2 w-full rounded-md border-gray-200 shadow-sm sm:text-sm" />
			</div>
		</ColumnOptions>
	</PropertyColumn>
	<TemplateColumn>
		<MyButton Text="Show Project"
				  Level="MyButton.ButtonLevel.Primary"
				  OnClick="@(() => ShowProject(context.Project.Id))"
		AddMarginTop />
	</TemplateColumn>
	<TemplateColumn>
		<button class="rounded-md bg-teal-600 px-4 py-2.5 text-sm font-medium text-white shadow-sm" onclick="@(() => EditTimeEntry(context.Id))">
			<svg class="w-5 h-5 text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
				<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m14.304 4.844 2.852 2.852M7 7H4a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h11a1 1 0 0 0 1-1v-4.5m2.409-9.91a2.017 2.017 0 0 1 0 2.853l-6.844 6.844L8 14l.713-3.565 6.844-6.844a2.015 2.015 0 0 1 2.852 0Z" />
			</svg>
		</button>
	</TemplateColumn>
</QuickGrid>

<Paginator State="@pagination" />

@if (projectId > 0)
{
	<ProjectDetails ProjectId="projectId" />
}


@code {
	int projectId; // Default project ID, can be set dynamically
	private string projectFilter = string.Empty; // Filter for project names
	PaginationState pagination = new PaginationState
		{
			ItemsPerPage = 10
		};

	IQueryable<TimeEntryResponse> FilteredTimeEntries
	{
		get
		{
			var result = TimeEntryService.TimeEntries.AsQueryable();

			if (!string.IsNullOrWhiteSpace(projectFilter))
			{
				result = result.Where(t => t.Project.Name.Contains(projectFilter, StringComparison.CurrentCultureIgnoreCase));
			}

			return result;
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await TimeEntryService.GetTimeEntriesByProjectId(projectId); // Load all time entries initially
		TimeEntryService.OnChange += StateHasChanged; // Subscribe to changes in time entries
	}

	private string GetDuration(DateTime? start, DateTime? end)
	{
		if (start != null && end != null)
		{
			var duration = end.Value - start.Value;
			var result = $"{duration.Hours}h {duration.Minutes}m";
			return result;
		}
		return string.Empty;
	}

	private void ShowProject(int id)
	{
		if (projectId == id)
		{
			return;
		}
		projectId = id;
		StateHasChanged();
	}

	public void Dispose()
	{
		TimeEntryService.OnChange -= StateHasChanged; // Unsubscribe from changes to avoid memory leaks
	}

	private void CreateTimeEntry()
	{
		// Navigate to the create time entry page
		NavigationManager.NavigateTo("/timeentry");
	}

	private void EditTimeEntry(int id)
	{
		// Navigate to the edit time entry page with the specified ID
		NavigationManager.NavigateTo($"/timeentry/{id}");
	}
}
